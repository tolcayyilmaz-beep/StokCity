<!DOCTYPE html>
<html lang="tr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Lafkat – Oyna + Forum</title>
<meta name="theme-color" content="#FF7F2F" />
<style>
  :root{
    --orange:#FF7F2F; --orange-2:#ff9a58; --ink:#1b1b1b; --muted:#6a3a1f;
    --card:#ffffff; --line:#ffd7bf; --bg:#fff7f2;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{
    margin:0; font-family: system-ui,-apple-system,Segoe UI,Inter,Roboto,Arial,sans-serif;
    background: linear-gradient(180deg, var(--orange) 0%, var(--orange-2) 100%);
    color:var(--ink);
  }
  .shell{
    max-width:1200px; margin:0 auto; padding:16px; min-height:100%;
    display:grid; grid-template-columns: 1fr 400px; gap:16px;
  }
  @media (max-width:1100px){ .shell{grid-template-columns: 1fr;} }

  header{
    grid-column:1/-1; background:#fff4ec; border:1px solid var(--line); border-radius:14px;
    padding:12px 16px; display:flex; align-items:center; gap:12px; margin-bottom:6px;
  }
  .logo{width:40px;height:40px;border-radius:10px;background:radial-gradient(100% 100% at 30% 30%,#ffd18f,#ff7f2f);
    display:grid;place-items:center;color:#fff;font-weight:800;box-shadow:0 6px 18px rgba(255,127,47,.35)}
  header h1{margin:0;font-size:18px}
  .tag{margin-left:auto;font-size:12px;background:#ffe8d7;color:#7a3b14;padding:6px 10px;border-radius:999px;border:1px solid #ffd7bf}
  .auth{
    display:flex; align-items:center; gap:8px; margin-left:12px;
  }
  .auth button{border:1px solid #ffd0b3;background:#fff;color:#7a3b14;padding:6px 10px;border-radius:10px;cursor:pointer;font-weight:600}
  .userpill{background:#fff;border:1px solid #ffd0b3;padding:6px 10px;border-radius:999px;font-weight:700;color:#7a3b14}

  /* LEFT – Oyun alanı */
  .left{
    background:var(--card); border:1px solid var(--line); border-radius:14px; padding:16px;
    min-height:560px;
  }
  .left h2{margin:4px 0 10px;font-size:18px;color:#7a3b14}
  .prompt{
    background:#fff7f0; border:1px dashed #ffc49f; border-radius:12px; padding:16px; margin-bottom:14px
  }
  .sentence{font-size:26px; line-height:1.35}
  .blank{padding:2px 10px; border-radius:8px; background:#ffe0c9; border:1px solid #ffb98d; color:#9a3e0d}
  .mode{display:flex; gap:10px; margin:12px 0; flex-wrap:wrap}
  .chip{border:1px solid #ffd0b3;background:#fff;color:#7a3b14;padding:8px 12px;border-radius:10px;cursor:pointer;font-weight:600}
  .chip.active{background:#ffefe4;border-color:#ffb98d;color:#6a2d0b}
  .creative{display:grid; gap:10px}
  input[type="text"]{
    padding:14px; border:1.5px solid #ffd0b3; border-radius:12px; font-size:16px; outline:none;
  }
  input[type="text"]:focus{border-color:#ff9a58; box-shadow:0 0 0 4px #ffe7d7}
  .choices{display:grid; grid-template-columns: repeat(2,minmax(0,1fr)); gap:10px}
  .btn{
    cursor:pointer; border:none; background:var(--orange); color:#fff; padding:12px 14px; border-radius:12px;
    font-weight:800; box-shadow:0 7px 16px rgba(255,127,47,.35); transition:.15s transform; font-size:14px;
  }
  .btn:hover{transform:translateY(-1px)}
  .btn.secondary{background:#ffffff; color:#ff6a08; border:1.5px solid #ffd0b3; box-shadow:none}
  .btn.ghost{background:#fff7ef; color:#7a3b14; border:1px dashed #ffc49f; box-shadow:none}
  .actions{display:flex; gap:10px; margin-top:8px; flex-wrap:wrap}
  .result-card{margin-top:12px; background:#fffdfb; border:1px solid var(--line); padding:12px; border-radius:12px}
  .result{font-size:20px}

  /* RIGHT – Forum paneli */
  .right{background:#fffdfb; border:1px solid var(--line); border-radius:14px; overflow:hidden}
  .summary{padding:14px; background:#fff9f4; border-bottom:1px solid var(--line)}
  .summary h3{margin:0 0 8px;font-size:15px;color:#7a3b14}
  .summary .top{
    background:#ffffff; border:1px solid var(--line); border-radius:12px; padding:12px;
  }
  .top .title{font-weight:700;font-size:14px}
  .top .meta{font-size:12px;color:#8b5a3a;margin-top:4px;display:flex;gap:10px;align-items:center;flex-wrap:wrap}

  .controls{
    padding:10px 14px; display:flex; align-items:center; gap:8px; border-bottom:1px solid var(--line);
    background:#fffefc;
  }
  .controls .chip{font-size:12px}
  .controls .chip.active{background:#ffefe4;border-color:#ffb98d;color:#6a2d0b}

  .feed{padding:10px 14px 16px; display:grid; gap:12px; max-height:70vh; overflow:auto}
  .post{background:#ffffff; border:1px solid var(--line); border-radius:12px; padding:12px}
  .head{display:flex; align-items:center; gap:10px; margin-bottom:8px}
  .avatar{width:36px;height:36px;border-radius:50%; background:#ffe3cf; display:grid;place-items:center; font-weight:800; color:#7a3b14}
  .who{display:flex; flex-direction:column}
  .who .name{font-weight:700}
  .who .time{font-size:12px;color:#8b5a3a}
  .badge{margin-left:6px; font-size:11px; background:#fff1cc; border:1px solid #ffd37a; color:#7a4d00; padding:2px 6px; border-radius:999px}

  .content{font-size:15px; line-height:1.45}
  .actions{display:flex; gap:10px; margin-top:10px; align-items:center; flex-wrap:wrap}
  .like-count{font-size:12px;color:#7a3b14}
  .btn.small{padding:6px 10px; font-size:12px}
  .btn.danger{background:#b42318}

  .comments{margin-top:10px; padding-top:10px; border-top:1px dashed #ffd0b3}
  .comments .label{font-weight:700; font-size:13px; color:#7a3b14; margin-bottom:6px}
  .comment-item{font-size:13px; background:#fffaf7; border:1px solid #ffe3cf; border-radius:8px; padding:8px; margin-top:6px}
  .comment-item .by{font-weight:700; margin-right:6px}
  .comment-form{display:flex; gap:6px; margin-top:8px; flex-wrap:wrap}
  .comment-form input{
    flex:1; min-width:120px; padding:8px 10px; border:1.5px solid #ffd0b3; border-radius:10px; font-size:13px;
  }

  /* Modal (Auth) */
  .modal{position:fixed; inset:0; display:none; place-items:center; background:rgba(0,0,0,.35); z-index:50}
  .modal .card{width:min(420px, 92vw); background:#fff; border-radius:14px; border:1px solid var(--line); padding:16px}
  .modal h3{margin:0 0 8px}
  .row{display:grid; gap:10px}
  .row input{padding:10px 12px;border:1.5px solid #ffd0b3;border-radius:10px}
</style>
</head>
<body>
  <div class="shell">
    <header>
      <div class="logo">💬</div>
      <h1>Lafkat – Oyna + Forum</h1>
      <div class="tag" id="modeTag">demo (offline)</div>
      <div class="auth" id="authBar">
        <span class="userpill" id="userPill" style="display:none;"></span>
        <button id="btnLogin">Giriş / Kayıt</button>
        <button id="btnLogout" style="display:none;">Çıkış</button>
      </div>
    </header>

    <!-- SOL: Oyun -->
    <section class="left" aria-labelledby="oyunTitle">
      <h2 id="oyunTitle">Boşluğu Doldur</h2>

      <div class="prompt">
        <div id="sentence" class="sentence"></div>
      </div>

      <div class="mode" role="tablist">
        <button class="chip active" id="tabCreative" aria-selected="true">Yaratıcı Mod</button>
        <button class="chip" id="tabQuick" aria-selected="false">Hızlı Mod</button>
        <button class="chip ghost" id="btnNew">Cümleyi Değiştir</button>
      </div>

      <div id="creative" class="creative" role="tabpanel" aria-labelledby="tabCreative">
        <label class="small" for="answer">Boşluğu kendi kelimenle tamamla:</label>
        <input id="answer" type="text" placeholder="ör. dondurma yemeyi" />
        <div class="actions">
          <button class="btn" id="btnSubmit">Gönder</button>
          <button class="btn secondary" id="btnClear">Temizle</button>
          <button class="btn ghost" id="btnPostToForum" title="Sonucu foruma gönder">Foruma Gönder</button>
        </div>
      </div>

      <div id="quick" class="creative" style="display:none" role="tabpanel" aria-labelledby="tabQuick">
        <div class="choices" id="choices"></div>
        <div class="actions">
          <button class="btn ghost" id="btnShuffle">Seçenekleri Yenile</button>
        </div>
      </div>

      <div class="result-card">
        <strong>Sonuç</strong>
        <div id="result" class="result">Henüz bir sonuç yok. Boşluğu doldur ve sonucu burada gör.</div>
        <div class="actions">
          <button class="btn secondary" id="btnCopy">Kopyala</button>
          <button class="btn" id="btnShare">Paylaş</button>
          <button class="btn ghost" id="btnCard">Kart indir (PNG)</button>
        </div>
      </div>
    </section>

    <!-- SAĞ: Forum paneli -->
    <aside class="right" aria-labelledby="forumTitle">
      <div class="summary">
        <h3 id="forumTitle">Bugünün En Popüler Cümlesi</h3>
        <div class="top" id="topCard">
          <div class="title" id="topText">—</div>
          <div class="meta" id="topMeta">—</div>
        </div>
      </div>

      <div class="controls">
        <span class="chip" id="sortPopular">En popüler</span>
        <span class="chip" id="sortNewest">En yeni</span>
        <span class="chip" id="sortToday">Bugün</span>
        <span class="chip active" id="sortLive">Canlı</span>
      </div>

      <div class="feed" id="feed" aria-live="polite"></div>
    </aside>
  </div>

  <!-- Auth Modal -->
  <div class="modal" id="authModal" role="dialog" aria-modal="true" aria-labelledby="authTitle">
    <div class="card">
      <h3 id="authTitle">Giriş / Kayıt</h3>
      <div class="row">
        <input id="regName" type="text" placeholder="Ad / Profil adı (kayıt için)" />
        <input id="regEmail" type="email" placeholder="E-posta" />
        <input id="regPass" type="password" placeholder="Şifre" />
        <div class="actions">
          <button class="btn" id="doRegister">Kayıt Ol</button>
          <button class="btn secondary" id="doLogin">Giriş Yap</button>
          <button class="btn ghost" id="closeAuth">Kapat</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Hidden canvas for share card -->
  <canvas id="cardCanvas" width="1080" height="1080" style="display:none"></canvas>

<!-- Firebase (compat) – sadece istersen aktif et -->
<script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js"></script>

<script>
/* =========================================
   CONFIG
========================================= */
let ENABLE_FIREBASE = false;              // 🔴 Lokal demoda false. Firebase kullanacaksan true yap.
const MOD_EMAILS = ["you@example.com"];   // 🔧 Moderatör e-postalarını ekle

// 🔧 PASTE YOUR FIREBASE CONFIG HERE (örn. TAHMIN projen)
const firebaseConfig = {
  // apiKey: "xxx",
  // authDomain: "xxx.firebaseapp.com",
  // projectId: "xxx",
  // storageBucket: "xxx.appspot.com",
  // messagingSenderId: "xxx",
  // appId: "xxx"
};

/* =========================================
   STATE
========================================= */
const state = {
  user: null,                 // {uid, email, displayName}
  posts: [],                  // forum gönderileri
  renderedSentence: "",
  currentPrompt: "",
  sortMode: "live",           // live | popular | newest | today
  likedLocal: new Set(JSON.parse(localStorage.getItem("lafkat_likes")||"[]")), // demo mod: postId set
};

/* =========================================
   HELPERS
========================================= */
const $ = sel => document.querySelector(sel);
function toast(text){
  const el = document.createElement("div");
  el.textContent = text;
  el.style.cssText = "position:fixed;left:50%;bottom:26px;transform:translateX(-50%);background:#111;color:#fff;padding:10px 14px;border-radius:10px;font-weight:700;box-shadow:0 10px 24px rgba(0,0,0,.25);z-index:9999";
  document.body.appendChild(el); setTimeout(()=>el.remove(), 1200);
}
function timeAgo(iso){
  const d = new Date(iso), s = (Date.now()-d.getTime())/1000;
  if(s<60) return "az önce";
  const m = s/60; if(m<60) return `${Math.floor(m)} dk önce`;
  const h = m/60; if(h<24) return `${Math.floor(h)} sa önce`;
  const day = h/24; return `${Math.floor(day)} g önce`;
}
function sameDay(aIso, bIso){
  const a = new Date(aIso), b = new Date(bIso);
  return a.getFullYear()===b.getFullYear() && a.getMonth()===b.getMonth() && a.getDate()===b.getDate();
}
function escapeHTML(s){
  return s.replace(/[&<>"']/g, m=>({ "&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#039;" }[m]));
}
function initial(name){ return (name||"")[0]?.toUpperCase() || "U"; }
function isMod(){ return !!state.user && MOD_EMAILS.includes(state.user.email||""); }
function todayISO(){ const d=new Date(); d.setHours(0,0,0,0); return d.toISOString(); }

/* =========================================
   GAME (sol panel)
========================================= */
const prompts = [
  "Uzun bir günün ardından ayakkabılarımı çıkarıp ____ istiyorum.",
  "Bugün işe giderken ____ yüzünden geciktim.",
  "Asansörde herkes susmuştu; ben ise ____ deyiverdim.",
  "Kahvemi yudumlarken bir anda ____ fark ettim.",
  "Otobüste yanımdaki kişi ____ yapınca gülmemek için zorlandım.",
  "Arkadaşlarım plan yaparken ben ____ önermiştim.",
  "Telefonum çalınca ekranda ____ yazıyordu.",
  "Akşam yemeğinde konu birden ____ dönüverdi.",
  "Yeni aldığım defterin ilk sayfasına ____ yazdım.",
  "Bugün kendime bir iyilik yaptım: ____."
];
const quickAnswers = [
  "dondurma yemeyi","şemsiye açmayı","yanlış kata çıkmayı","ıslık çalmayı",
  "küçük bir şaka yapmayı","yeni bir şarkı keşfetmeyi","rastgele selam vermeyi","koşarak uzaklaşmayı",
  "pencereye bakmayı","yoldan dönmeyi","göz kırpmayı","sessizce gülmeyi"
];
function pick(arr,n=1){ const t=[...arr],o=[]; while(o.length<n && t.length){o.push(t.splice(Math.floor(Math.random()*t.length),1)[0])} return n===1?o[0]:o; }
function renderSentence(){
  const html = state.currentPrompt.replace("____", `<span class="blank">_____</span>`);
  $("#sentence").innerHTML = html;
}
function newPrompt(){
  state.currentPrompt = pick(prompts);
  renderSentence();
  fillChoices();
  setResult("Henüz bir sonuç yok. Boşluğu doldur ve sonucu burada gör.");
}
function fillChoices(){
  const box = $("#choices"); box.innerHTML="";
  pick(quickAnswers,4).forEach(txt=>{
    const b = document.createElement("button");
    b.className = "btn secondary"; b.textContent = txt;
    b.addEventListener("click", ()=>submitAnswer(txt));
    box.appendChild(b);
  });
}
function submitAnswer(filler){
  const full = state.currentPrompt.replace("____", filler.trim());
  state.renderedSentence = full;
  setResult(full);
}
function setResult(text){
  const out = $("#result"); out.textContent = text;
}

/* Share/Kopyala/Kart */
$("#btnCopy").addEventListener("click", ()=>{
  if(!state.renderedSentence) return toast("Önce boşluğu doldur 😊");
  navigator.clipboard.writeText(state.renderedSentence).then(()=>toast("Kopyalandı!"));
});
$("#btnShare").addEventListener("click", async ()=>{
  if(!state.renderedSentence) return toast("Önce boşluğu doldur 😊");
  if(navigator.share) { try{ await navigator.share({title:"Lafkat", text:state.renderedSentence}); }catch{} }
  else toast("Tarayıcı paylaşımı desteklemiyor.");
});
$("#btnCard").addEventListener("click", ()=>{
  if(!state.renderedSentence) return toast("Önce boşluğu doldur 😊");
  const c = $("#cardCanvas"), ctx=c.getContext("2d");
  const grd = ctx.createLinearGradient(0,0,0,c.height);
  grd.addColorStop(0, "#FF7F2F"); grd.addColorStop(1, "#ff9a58");
  ctx.fillStyle = grd; ctx.fillRect(0,0,c.width,c.height);
  ctx.fillStyle="#fff"; roundRect(ctx,100,220,c.width-200,540,48); ctx.fill();
  ctx.fillStyle="#111"; ctx.font="bold 48px Inter, Segoe UI, Arial"; wrapText(ctx, state.renderedSentence, 140, 320, c.width-280, 64);
  ctx.fillStyle="#fff"; ctx.font="bold 64px Inter, Segoe UI, Arial"; ctx.fillText("Lafkat", 100, c.height-140);
  ctx.fillStyle="rgba(255,255,255,.9)"; ctx.font="28px Inter, Segoe UI, Arial"; ctx.fillText("#Lafkat • Sen de oyna!", 100, c.height-92);
  const a = document.createElement("a"); a.href=c.toDataURL("image/png"); a.download="lafkat-kart.png"; a.click();
});
function wrapText(ctx,text,x,y,maxWidth,lineHeight){
  const words=text.split(' '); let line='', lines=[];
  for(let n=0;n<words.length;n++){
    const test=line+words[n]+' ', w=ctx.measureText(test).width;
    if(w>maxWidth && n>0){ lines.push(line.trim()); line=words[n]+' '; } else { line=test; }
  } lines.push(line.trim());
  lines.forEach((ln,i)=>ctx.fillText(ln,x,y+i*lineHeight));
}
function roundRect(ctx,x,y,w,h,r){
  ctx.beginPath(); ctx.moveTo(x+r,y);
  ctx.arcTo(x+w,y,x+w,y+h,r); ctx.arcTo(x+w,y+h,x,y+h,r);
  ctx.arcTo(x,y+h,x,y,r); ctx.arcTo(x,y,x+w,y,r); ctx.closePath();
}

/* UI events */
$("#btnNew").addEventListener("click", newPrompt);
$("#btnShuffle").addEventListener("click", fillChoices);
$("#btnClear").addEventListener("click", ()=>{$("#answer").value=""; $("#answer").focus();});
$("#btnSubmit").addEventListener("click", ()=>{
  const v = $("#answer").value.trim(); if(!v) return toast("Bir şey yaz 😊");
  submitAnswer(v);
});
$("#tabCreative").addEventListener("click", ()=>{
  $("#tabCreative").classList.add("active"); $("#tabQuick").classList.remove("active");
  $("#creative").style.display="grid"; $("#quick").style.display="none";
});
$("#tabQuick").addEventListener("click", ()=>{
  $("#tabQuick").classList.add("active"); $("#tabCreative").classList.remove("active");
  $("#creative").style.display="none"; $("#quick").style.display="grid";
});

/* Forum’a gönder */
$("#btnPostToForum").addEventListener("click", async ()=>{
  if(!state.renderedSentence) return toast("Önce sonucu oluştur 😊");
  await createPost(state.renderedSentence);
  toast("Foruma gönderildi!");
});

/* =========================================
   AUTH (modal) – opsiyonel (Firebase varsa)
========================================= */
const authModal = $("#authModal");
$("#btnLogin").addEventListener("click", ()=>{ authModal.style.display="grid"; });
$("#closeAuth").addEventListener("click", ()=>{ authModal.style.display="none"; });
$("#doRegister").addEventListener("click", async ()=>{
  if(!ENABLE_FIREBASE) return toast("Demo modda kayıt pasif.");
  const name=$("#regName").value.trim(), email=$("#regEmail").value.trim(), pass=$("#regPass").value;
  if(!email || !pass || !name) return toast("Ad, e-posta ve şifre girin");
  try{
    const {user} = await firebase.auth().createUserWithEmailAndPassword(email, pass);
    await user.updateProfile({displayName:name});
    state.user = {uid:user.uid, email:user.email, displayName:user.displayName};
    renderAuth();
    toast("Kayıt başarılı!");
    authModal.style.display="none";
  }catch(err){ alert(err.message); }
});
$("#doLogin").addEventListener("click", async ()=>{
  if(!ENABLE_FIREBASE) return toast("Demo modda giriş pasif.");
  const email=$("#regEmail").value.trim(), pass=$("#regPass").value;
  if(!email || !pass) return toast("E-posta ve şifre girin");
  try{
    const {user} = await firebase.auth().signInWithEmailAndPassword(email, pass);
    state.user = {uid:user.uid, email:user.email, displayName:user.displayName};
    renderAuth();
    toast("Giriş yapıldı!");
    authModal.style.display="none";
  }catch(err){ alert(err.message); }
});
$("#btnLogout").addEventListener("click", async ()=>{
  if(ENABLE_FIREBASE){ await firebase.auth().signOut(); }
  state.user=null; renderAuth();
});
function renderAuth(){
  const pill=$("#userPill"), btnIn=$("#btnLogin"), btnOut=$("#btnLogout");
  if(state.user){
    pill.style.display="inline-block"; pill.textContent = state.user.displayName || state.user.email;
    btnOut.style.display="inline-block"; btnIn.style.display="none";
  }else{
    pill.style.display="none"; btnOut.style.display="none"; btnIn.style.display="inline-block";
  }
}

/* =========================================
   FORUM (sağ panel)
   - Demo (offline) datası
   - Firebase Firestore (opsiyonel)
========================================= */
const demoPosts = [
  { id:"1", uid:"u1", name:"Ayşe K.", text:"Bugün işe giderken şemsiyeyle dans ettim.", likes:12, at:"2025-09-03T18:10:00Z", comments:[{by:"Mert", text:"Tam benlik!"}] },
  { id:"2", uid:"u2", name:"Erdem T.", text:"Asansörde yanlış kata çıkıp kahkaha attım.", likes:8,  at:"2025-09-03T18:45:00Z", comments:[{by:"Seda", text:"Klasik 😄"},{by:"Mina", text:"Aynısı bana da oldu!"}] },
  { id:"3", uid:"u3", name:"Zeynep A.", text:"Kahvemi şekersiz sanıp iki kez şeker attım.", likes:15, at:"2025-09-03T19:05:00Z", comments:[] },
  { id:"4", uid:"u4", name:"Kerem B.", text:"Otobüste yanımdaki kişi uyuyunca ben de esnedim.", likes:6,  at:"2025-09-03T19:20:00Z", comments:[{by:"Can", text:"Bulaşıcı esneme!"}] },
  { id:"5", uid:"u5", name:"Mina R.",  text:"Telefonum çalınca 'Pizza geldi!' diye açtım.", likes:19, at:"2025-09-03T20:00:00Z", comments:[{by:"Barış", text:"Efsane replik!"}] },
  { id:"6", uid:"u6", name:"Hakan D.", text:"Markete ekmek almaya gidip çiçekle döndüm.", likes:11, at:"2025-09-03T20:30:00Z", comments:[] },
];

async function initFirebaseIfAny(){
  try{
    if(ENABLE_FIREBASE && firebaseConfig && firebaseConfig.projectId){
      firebase.initializeApp(firebaseConfig);
      $("#modeTag").textContent = "canlı (Firebase)";
      // Auth dinle
      firebase.auth().onAuthStateChanged(u=>{
        if(u){ state.user={uid:u.uid,email:u.email,displayName:u.displayName}; }
        else{ state.user=null; }
        renderAuth();
      });
      // Live feed
      subscribePostsLive();
      return;
    }
  }catch(e){ console.warn("Firebase init error:", e); }
  // Demo mode
  state.posts = demoPosts.map(x=>({...x}));
  renderFeed();
  renderTop();
}

function renderTop(){
  if(!state.posts.length){ $("#topText").textContent="—"; $("#topMeta").textContent="—"; return; }
  const today = new Date();
  const top = [...state.posts]
    .filter(p=> sameDay(p.at, today))
    .sort((a,b)=> b.likes - a.likes || new Date(b.at)-new Date(a.at))[0] || state.posts[0];
  $("#topText").textContent = `"${top.text}"`;
  $("#topMeta").innerHTML = `
    <span>👤 ${escapeHTML(top.name)}</span>
    <span>👍 ${top.likes}</span>
    <span>🕒 ${timeAgo(top.at)}</span>
  `;
}

function sortPostsInPlace(){
  const mode = state.sortMode;
  const today = new Date();
  if(mode==="popular"){
    state.posts.sort((a,b)=> b.likes - a.likes || new Date(b.at)-new Date(a.at));
  }else if(mode==="newest"){
    state.posts.sort((a,b)=> new Date(b.at)-new Date(a.at));
  }else if(mode==="today"){
    state.posts.sort((a,b)=> b.likes - a.likes || new Date(b.at)-new Date(a.at));
    state.posts = state.posts.filter(p=> sameDay(p.at, today));
  } // live -> dokunma (gelen sırayı koru)
}

function renderFeed(){
  const feed = $("#feed"); feed.innerHTML="";
  const snapshot = (state.sortMode==="today") ? [...state.posts] : [...state.posts]; // copy
  sortPostsInPlace();
  (state.posts.length?state.posts:[]).forEach(p=>{
    const card = document.createElement("article");
    card.className = "post"; card.setAttribute("data-id", p.id);

    const isTopToday = sameDay(p.at, new Date()) &&
      p.likes === Math.max(...state.posts.filter(x=>sameDay(x.at,new Date())).map(x=>x.likes));

    card.innerHTML = `
      <div class="head">
        <div class="avatar" aria-hidden="true">${initial(p.name)}</div>
        <div class="who">
          <div class="name">${escapeHTML(p.name)}
            ${isTopToday?'<span class="badge" title="Günün Yıldızı">⭐ Günün Yıldızı</span>':""}
          </div>
          <div class="time">${timeAgo(p.at)}</div>
        </div>
        ${ (isMod() || (state.user && state.user.uid===p.uid)) ? `<div style="margin-left:auto">
            <button class="btn small danger" data-del="${p.id}">Sil</button>
          </div>` : "" }
      </div>
      <div class="content">${escapeHTML(p.text)}</div>
      <div class="actions">
        <button class="btn small" data-like="${p.id}">👍 Beğen</button>
        <span class="like-count" id="likes-${p.id}">${p.likes} beğeni</span>
        <button class="btn small secondary" data-comment-toggle="${p.id}">💬 Yorumlar</button>
      </div>
      <div class="comments" id="comments-${p.id}" style="display:none">
        <div class="label">Yorumlar</div>
        <div class="list" id="list-${p.id}">
          ${ (p.comments||[]).length ? p.comments.map(c=>(
            `<div class="comment-item"><span class="by">${escapeHTML(c.by)}:</span>${escapeHTML(c.text)}</div>`
          )).join("") : `<div class="comment-item">Henüz yorum yok.</div>`}
        </div>
        <form class="comment-form" data-form="${p.id}">
          <input type="text" name="by" placeholder="Adınız" value="${escapeHTML(state.user?.displayName||"Ziyaretçi")}" required />
          <input type="text" name="text" placeholder="Yorum yazın..." required />
          <button class="btn small" type="submit">Gönder</button>
        </form>
      </div>
    `;
    feed.appendChild(card);
  });
  renderTop();
}

/* Beğeni – demo vs Firestore */
document.addEventListener("click",(e)=>{
  const likeBtn = e.target.closest("[data-like]");
  if(likeBtn){ const id = likeBtn.getAttribute("data-like"); likePost(id); }

  const toggleBtn = e.target.closest("[data-comment-toggle]");
  if(toggleBtn){
    const id = toggleBtn.getAttribute("data-comment-toggle");
    const box = $("#comments-"+id);
    box.style.display = box.style.display==="none" ? "block" : "none";
  }

  const delBtn = e.target.closest("[data-del]");
  if(delBtn){ const id = delBtn.getAttribute("data-del"); deletePost(id); }

  // Sort chips
  if(e.target.id==="sortPopular"){ state.sortMode="popular"; chipActive("sortPopular"); renderFeed(); }
  if(e.target.id==="sortNewest"){ state.sortMode="newest"; chipActive("sortNewest"); renderFeed(); }
  if(e.target.id==="sortToday"){ state.sortMode="today"; chipActive("sortToday"); renderFeed(); }
  if(e.target.id==="sortLive"){ state.sortMode="live"; chipActive("sortLive"); renderFeed(); }
});
function chipActive(id){
  ["sortPopular","sortNewest","sortToday","sortLive"].forEach(x=>$("#"+x).classList.remove("active"));
  $("#"+id).classList.add("active");
}

/* Yorum gönder */
document.addEventListener("submit", async (e)=>{
  const form = e.target.closest("[data-form]");
  if(!form) return;
  e.preventDefault();
  const id = form.getAttribute("data-form");
  const by = form.querySelector('input[name="by"]').value.trim() || "Ziyaretçi";
  const text = form.querySelector('input[name="text"]').value.trim();
  if(!text) return;

  if(ENABLE_FIREBASE){
    try{
      await firebase.firestore().collection("posts").doc(id).collection("comments").add({
        by, text, at: new Date().toISOString(), uid: state.user?.uid || null
      });
      toast("Yorum eklendi");
    }catch(err){ alert(err.message); }
  }else{
    const p = state.posts.find(x=>x.id===id);
    (p.comments||(p.comments=[])).push({by,text});
    const list = $("#list-"+id);
    if(list.querySelector(".comment-item") && list.firstElementChild?.textContent.includes("Henüz yorum yok")) list.firstElementChild.remove();
    const item = document.createElement("div"); item.className="comment-item";
    item.innerHTML = `<span class="by">${escapeHTML(by)}:</span>${escapeHTML(text)}`;
    list.appendChild(item);
    form.reset();
  }
});

/* CRUD */
async function createPost(text){
  const base = {
    text,
    at: new Date().toISOString(),
    likes: 0,
    uid: state.user?.uid || "guest",
    name: state.user?.displayName || "Ziyaretçi"
  };
  if(ENABLE_FIREBASE){
    await firebase.firestore().collection("posts").add(base);
  }else{
    const id = String(Date.now());
    state.posts.unshift({id, comments:[], ...base});
    renderFeed();
  }
}
async function likePost(id){
  if(ENABLE_FIREBASE){
    if(!state.user) return toast("Beğenmek için giriş yapın");
    const uid = state.user.uid;
    const postRef = firebase.firestore().collection("posts").doc(id);
    const likeRef = postRef.collection("likes").doc(uid);
    try{
      await firebase.firestore().runTransaction(async (tx)=>{
        const likeDoc = await tx.get(likeRef);
        if(likeDoc.exists) throw new Error("Bu gönderiyi zaten beğendiniz.");
        const postDoc = await tx.get(postRef);
        if(!postDoc.exists) throw new Error("Gönderi bulunamadı");
        const likes = (postDoc.data().likes||0)+1;
        tx.update(postRef, {likes});
        tx.set(likeRef, {uid, at: new Date().toISOString()});
      });
    }catch(err){ return toast(err.message); }
  }else{
    // demo: localStorage ile tek tık
    if(state.likedLocal.has(id)) return toast("Zaten beğendiniz");
    state.likedLocal.add(id);
    localStorage.setItem("lafkat_likes", JSON.stringify([...state.likedLocal]));
    const p = state.posts.find(x=>x.id===id); if(p){ p.likes++; }
    $("#likes-"+id).textContent = `${p.likes} beğeni`;
    if(state.sortMode==="popular" || state.sortMode==="today") renderFeed(); else renderTop();
  }
}
async function deletePost(id){
  if(ENABLE_FIREBASE){
    if(!(isMod() || state.user)) return;
    // Basit kontrol: yazar veya mod
    const doc = await firebase.firestore().collection("posts").doc(id).get();
    if(!doc.exists) return;
    const data = doc.data();
    if(!isMod() && data.uid !== state.user.uid) return toast("Silme yetkiniz yok.");
    // Yorum alt koleksiyonlarını silmek için tek tek (basit demo)
    const commentsSnap = await firebase.firestore().collection("posts").doc(id).collection("comments").get();
    const batch = firebase.firestore().batch();
    commentsSnap.forEach(d=> batch.delete(d.ref));
    batch.delete(doc.ref);
    await batch.commit();
  }else{
    if(!isMod()) return toast("Demo modda sadece moderatörler silebilir (MOD_EMAILS).");
    state.posts = state.posts.filter(x=>x.id!==id);
    renderFeed();
  }
}

/* Firestore canlı abonelik */
function subscribePostsLive(){
  firebase.firestore().collection("posts")
  .orderBy("at","desc")
  .limit(200)
  .onSnapshot(async (snap)=>{
    const arr = [];
    for(const d of snap.docs){
      const p = { id:d.id, ...d.data(), comments:[] };
      // Yorumları da çek (özet)
      const cSnap = await firebase.firestore().collection("posts").doc(d.id).collection("comments").orderBy("at","asc").get();
      p.comments = cSnap.docs.map(x=>x.data());
      arr.push(p);
    }
    state.posts = arr;
    renderFeed();
  });
}

/* =========================================
   INIT
========================================= */
function start(){
  // Firebase’i gerçekten kullanıyor muyuz?
  if(!(firebaseConfig && firebaseConfig.projectId)) ENABLE_FIREBASE = false;
  $("#modeTag").textContent = ENABLE_FIREBASE ? "canlı (Firebase)" : "demo (offline)";
  newPrompt(); fillChoices(); renderAuth(); initFirebaseIfAny();
}
start();
</script>
</body>
</html>
